import React from 'react';

interface VulnerableParam {
  url: string;
  method?: string;
  parameter: string;
  type?: string;
  payload: string;
  details?: string;
}

interface SQLInjectionData {
  vulnerable_params?: VulnerableParam[];
  dbms_info?: string;
}

interface SQLInjectionVulnerabilityProps {
  sqliData: SQLInjectionData[] | SQLInjectionData | null;
}

const SQLInjectionVulnerability: React.FC<SQLInjectionVulnerabilityProps> = ({ sqliData }) => {
  // Handle case when no data is available
  if (!sqliData) {
    return <p className="text-green-600">No SQL injection vulnerabilities detected.</p>;
  }
  
  // Convert to array if single object
  const dataArray = Array.isArray(sqliData) ? sqliData : [sqliData];
  
  // Check if any vulnerable params exist
  const hasVulnerabilities = dataArray.some(item => 
    item.vulnerable_params && item.vulnerable_params.length > 0
  );
  
  if (!hasVulnerabilities) {
    return <p className="text-green-600">No SQL injection vulnerabilities detected.</p>;
  }

  return (
    <div className="bg-red-50 rounded-lg p-4 border border-red-200">
      <h4 className="text-md font-medium text-red-700 mb-2">Critical Vulnerabilities Detected</h4>
      <div className="space-y-4">
        {dataArray.map((sqliItem, dataIdx) => (
          <React.Fragment key={dataIdx}>
            {sqliItem.vulnerable_params?.map((param, idx) => (
              <div key={`${dataIdx}-${idx}`} className="bg-white rounded-lg p-3 border border-red-100">
                <div className="flex items-center gap-2 mb-2">
                  <span className="px-2 py-0.5 text-xs rounded-full border border-red-300 bg-red-100 text-red-700">
                    HIGH
                  </span>
                  <h5 className="text-sm font-medium text-red-800">SQL Injection Vulnerability</h5>
                </div>
                <div className="space-y-2 text-sm">
                  <div className="flex">
                    <span className="font-medium text-red-700 w-20">URL:</span>
                    <span className="text-red-900">{param.url}</span>
                  </div>
                  <div className="flex">
                    <span className="font-medium text-red-700 w-20">Method:</span>
                    <span className="text-red-900">{param.method || "GET"}</span>
                  </div>
                  <div className="flex">
                    <span className="font-medium text-red-700 w-20">Parameter:</span>
                    <span className="text-red-900">{param.parameter}</span>
                  </div>
                  <div className="flex">
                    <span className="font-medium text-red-700 w-20">Type:</span>
                    <span className="text-red-900">{param.type || "Unknown"}</span>
                  </div>
                  <div className="flex">
                    <span className="font-medium text-red-700 w-20">Payload:</span>
                    <span className="text-red-900 font-mono text-xs">{param.payload}</span>
                  </div>
                  {param.details && (
                    <div className="mt-2">
                      <span className="font-medium text-red-700 block mb-1">Details:</span>
                      <pre className="text-xs bg-red-50 p-2 rounded font-mono overflow-x-auto whitespace-pre-wrap">
                        {param.details}
                      </pre>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </React.Fragment>
        ))}
      </div>
      <div className="mt-3 p-3 bg-red-100 rounded-lg text-sm text-red-800">
        <p className="font-medium mb-1">Immediate Action Required</p>
        <p>SQL Injection vulnerabilities allow attackers to manipulate your database queries, potentially accessing, 
        modifying, or deleting sensitive data. This is a critical security vulnerability that should be addressed immediately.</p>
      </div>
    </div>
  );
};

export default SQLInjectionVulnerability;